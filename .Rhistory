col=colorsMS2[1:length(peaksMS2)], lty = 5, lwd = 2, cex=0.6)
graphics::legend("bottomright", title = "Max. intensity",
legend=formatC(ints2, format = "e", digits = 2),
col=colorsMS2[1:length(peaksMS2)], lty = 5, lwd = 2, cex=0.6)
# if data is DDA
} else if (msobject$metaData$generalMetadata$acquisitionmode == "DDA"){
# for each scan
for (s in unique(scansMS2)){
# subset raw data
ssrawMS <- rawMS[rawMS$peakID == s,]
ssmaxrawMS <- max(ssrawMS$int)
ssrawMS$int <- ssrawMS$int*100/max(ssrawMS$int)
ssrawMS$int[ssrawMS$int < 2] <- ssrawMS$int[ssrawMS$int < 2] + 2 # to improve visualization
mz2 <- peaksMS2[scansMS2 == s]
namesmz2 <- namesMS2[scansMS2 == s]
namesmz2 <- namesmz2[order(mz2, decreasing = FALSE)]
mz2 <- mz2[order(mz2, decreasing = FALSE)]
# assign colors
ssrawMS$color <- "black"
ssrawMS$color[ssrawMS$mz %in% mz2] <- colorsMS2[1:sum(ssrawMS$mz %in% mz2)]
# Find precursor in the MS/MS spectrum
scanprec <- unlist(strsplit(s, "_"))
collisionenergy <- as.numeric(scanprec[2])
scanprec <- as.numeric(scanprec[3])
precursor <- msobject$metaData$scansMetadata$precursor[
which(msobject$metaData$scansMetadata$msLevel == 2 &
msobject$metaData$scansMetadata$collisionEnergy == collisionenergy)[scanprec]]
prec <- as.numeric(unlist(sapply(precursor, mzMatch, ssrawMS$mz, ppm = 10)))
if (length(prec) > 0){
minppm <- which.min(prec[seq(2, length(prec), 2)])
prec <- prec[seq(1, length(prec), 2)][minppm]
mzprec <- ssrawMS$mz[prec]
nameprec <- paste(round(mzprec, 3), "_precursor", sep="")
if (ssrawMS$color[prec] == "black"){
ssrawMS$color[prec] <- colorsMS1[1]
namesmz2 <- c(namesmz2, nameprec)
}
}
colors2 <- ssrawMS$color[ssrawMS$color != "black"]
blacks <- ssrawMS$color == "black"
#plot
plot(ssrawMS$mz[blacks], ssrawMS$int[blacks], type = "h",
col = scales::alpha(ssrawMS$color[blacks], 0.7),
xlim = c(0, max(ssrawMS$mz)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$mz, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
lines(ssrawMS$mz[!blacks], ssrawMS$int[!blacks], type = "h",
col = scales::alpha(ssrawMS$color[!blacks], 1))
graphics::axis(2,at=seq(2, 122, 20), labels = seq(0, 120, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
# clean
ssrawMSclean <- ssrawMS[!blacks,]
plot(ssrawMSclean$mz, ssrawMSclean$int, type = "h",
col = scales::alpha(ssrawMSclean$color, 1),
xlim = c(0, max(ssrawMS$mz)+20), ylim = c(0, 132),
lwd = 1.5, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$mz, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 102, 20), labels = seq(0, 100, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
}
}
}
msobject$annotation$plots[[r]] <- grDevices::recordPlot() # save plot
invisible(grDevices::dev.off()) # close pdf NULL device
results <- results[-toremove,]
}
devtools::load_all(".")
msobject <- plotLipids(msbatch$msobjects[[3]])
load("H:/Maribel/Paquetes/PruebasLipidMS/LipidMSv3/Prueba_v304/env.RData")
devtools::load_all(".")
ppm_precursor = 5
ppm_products = 10
rttol = 5
coelCutoff = 0.8
lipidClassesPos = c("MG", "LPC", "LPE", "PC", "PCo",
"PCp", "PE", "PEo", "PEp", "PG",
"PI", "Sph", "SphP", "Cer",
"CerP", "AcylCer", "SM",
"Carnitines", "CE", "DG", "TG")
lipidClassesNeg = c("FA", "FAHFA", "LPC", "LPE",
"LPG", "LPI", "LPS", "PC", "PCo",
"PCp", "PE", "PEo", "PEp", "PG",
"PI", "PS", "Sph", "SphP",
"Cer", "CerP", "AcylCer", "SM",
"CL", "BA")
#' @return msbatch
#'
#' @examples
#' \dontrun{
#' msbatch <- annotatemsbatch(msbatch)
#'
#' msbatch$features
#' }
#'
#' @author M Isabel Alcoriza-Balaguer <maribel_alcoriza@iislafe.es>
annotatemsbatch <- function(msbatch,
ppm_precursor = 5,
ppm_products = 10,
rttol = 5,
coelCutoff = 0.8,
lipidClassesPos = c("MG", "LPC", "LPE", "PC", "PCo",
"PCp", "PE", "PEo", "PEp", "PG",
"PI", "Sph", "SphP", "Cer",
"CerP", "AcylCer", "SM",
"Carnitines", "CE", "DG", "TG"),
lipidClassesNeg = c("FA", "FAHFA", "LPC", "LPE",
"LPG", "LPI", "LPS", "PC", "PCo",
"PCp", "PE", "PEo", "PEp", "PG",
"PI", "PS", "Sph", "SphP",
"Cer", "CerP", "AcylCer", "SM",
"CL", "BA"),
dbs,
simplifyAnnotations = FALSE,
parallel = FALSE,
ncores){
##############################################################################
# Check arguments
if (parallel){
if (missing(ncores)){
stop("ncores argument is required if parallel is TRUE")
}
if (ncores > parallel::detectCores()){
ncores <- parallel::detectCores() - 1
message("ncores is greater than availables cores. ", ncores, " will be used.")
}
}
if (missing(dbs)){
dbs <- assignDB()
}
##############################################################################
# lipid annotation in samples acquired in DIA or DDA mode
toannotate <- which(msbatch$metaData$acquisitionmode %in% c("DIA", "DDA"))
if (parallel) {
cl <- makePSOCKcluster(ncores)
doParallel::registerDoParallel(cl)
`%d%` <- `%dopar%`
} else {
`%d%` <- `%do%`
}
x <- c()
msbatch$msobjects[toannotate] <- foreach::foreach(x = 1:length(toannotate)) %d% {
if (msbatch$msobjects[[toannotate[x]]]$metaData$generalMetadata$polarity == "positive"){
idPOS(msobject = msbatch$msobjects[[toannotate[x]]],
ppm_precursor = 5,
ppm_products = 10,
rttol = 5,
coelCutoff = 0.8,
lipidClasses = lipidClassesPos,
dbs = dbs)
} else if (msbatch$msobjects[[toannotate[x]]]$metaData$generalMetadata$polarity == "negative"){
idNEG(msobject = msbatch$msobjects[[toannotate[x]]],
ppm_precursor = 5,
ppm_products = 10,
rttol = 5,
coelCutoff = 0.8,
lipidClasses = lipidClassesNeg,
dbs = dbs)
}
}
if (parallel){
parallel::stopCluster(cl)
}
# remove previous annotations and write results on the features table
msbatch$features <- msbatch$features[, !colnames(msbatch$features) %in%
c("LipidMSid", "Adduct",
"confidenceLevel", "Score",
"ScoreInt", "nsamples")]
msbatch <- joinAnnotationResults(msbatch,
simplifyAnnotations = simplifyAnnotations)
return(msbatch)
}
simplifyAnnotations = FALSE
parallel = FALSE
##############################################################################
# Check arguments
if (parallel){
if (missing(ncores)){
stop("ncores argument is required if parallel is TRUE")
}
if (ncores > parallel::detectCores()){
ncores <- parallel::detectCores() - 1
message("ncores is greater than availables cores. ", ncores, " will be used.")
}
}
dbs <- assignDB()
##############################################################################
# lipid annotation in samples acquired in DIA or DDA mode
toannotate <- which(msbatch$metaData$acquisitionmode %in% c("DIA", "DDA"))
toannotate
if (parallel) {
cl <- makePSOCKcluster(ncores)
doParallel::registerDoParallel(cl)
`%d%` <- `%dopar%`
} else {
`%d%` <- `%do%`
}
x <- c()
`%d%` <- `%do%`
x<-1
msbatch$msobjects[[toannotate[x]]]$metaData$generalMetadata$polarity
idNEG(msobject = msbatch$msobjects[[toannotate[x]]],
ppm_precursor = 5,
ppm_products = 10,
rttol = 5,
coelCutoff = 0.8,
lipidClasses = lipidClassesNeg,
dbs = dbs)
msbatch$msobjects[toannotate] <- foreach::foreach(x = 1:length(toannotate)) %d% {
if (msbatch$msobjects[[toannotate[x]]]$metaData$generalMetadata$polarity == "positive"){
idPOS(msobject = msbatch$msobjects[[toannotate[x]]],
ppm_precursor = ppm_precursor,
ppm_products = ppm_products,
rttol = rttol,
coelCutoff = coelCutoff,
lipidClasses = lipidClassesPos,
dbs = dbs)
} else if (msbatch$msobjects[[toannotate[x]]]$metaData$generalMetadata$polarity == "negative"){
idNEG(msobject = msbatch$msobjects[[toannotate[x]]],
ppm_precursor = ppm_precursor,
ppm_products = ppm_products,
rttol = rttol,
coelCutoff = coelCutoff,
lipidClasses = lipidClassesNeg,
dbs = dbs)
}
}
# remove previous annotations and write results on the features table
msbatch$features <- msbatch$features[, !colnames(msbatch$features) %in%
c("LipidMSid", "Adduct",
"confidenceLevel", "Score",
"ScoreInt", "nsamples")]
msbatch <- joinAnnotationResults(msbatch,
simplifyAnnotations = simplifyAnnotations)
##############################################################################
# lipid annotation in samples acquired in DIA or DDA mode
toannotate <- which(msbatch$metaData$acquisitionmode %in% c("DIA", "DDA"))
toannotate
devtools::load_all(".")
rm(list = c("annotatemsbatch"))
devtools::load_all(".")
msbatch$msobjects[toannotate] <- foreach::foreach(x = 1:length(toannotate)) %d% {
if (msbatch$msobjects[[toannotate[x]]]$metaData$generalMetadata$polarity == "positive"){
idPOS(msobject = msbatch$msobjects[[toannotate[x]]],
ppm_precursor = ppm_precursor,
ppm_products = ppm_products,
rttol = rttol,
coelCutoff = coelCutoff,
lipidClasses = lipidClassesPos,
dbs = dbs)
} else if (msbatch$msobjects[[toannotate[x]]]$metaData$generalMetadata$polarity == "negative"){
idNEG(msobject = msbatch$msobjects[[toannotate[x]]],
ppm_precursor = ppm_precursor,
ppm_products = ppm_products,
rttol = rttol,
coelCutoff = coelCutoff,
lipidClasses = lipidClassesNeg,
dbs = dbs)
}
}
# remove previous annotations and write results on the features table
msbatch$features <- msbatch$features[, !colnames(msbatch$features) %in%
c("LipidMSid", "Adduct",
"confidenceLevel", "Score",
"ScoreInt", "nsamples")]
msbatch <- joinAnnotationResults(msbatch,
simplifyAnnotations = simplifyAnnotations)
View(msbatch$msobjects[[2]]$annotation$annotatedPeaklist[msbatch$msobjects[[2]]$annotation$annotatedPeaklist$LipidMSid!="",])
# save par parameters
oldpar <- graphics::par(no.readonly = TRUE, new = FALSE)
oldpar
on.exit(graphics::par(oldpar))
library(LipidMS)
dmzagglom = 15
drtagglom = 500
drtclust = 100
minpeak = c(5, 3)
drtgap = 10
drtminpeak = 15
drtmaxpeak = c(100, 200)
recurs = 5
sb = c(3, 2)
sn = 2
minint = c(1000, 100)
weight = c(2, 3)
dmzIso = 10
drtIso = 5
parallel = FALSE
verbose = TRUE
if (missing(metadata)){
stop("metadata must be a data.frame with at least 3 columns
(sample, acquisitionmode, sampletype) or a csv file")
} else {
if (is.character(metadata)){
metadata <- read.csv(metadata, header = TRUE)
}
if(is.data.frame(metadata)){
if(!all(c("sample", "acquisitionmode", "sampletype") %in% colnames(metadata))){
stop("metadata must have at least 3 columns sample, acquisitionmode and sampletype")
}
if (!all(grepl("mzXML", metadata$sample))){
metadata$sample[!grepl("mzXML", metadata$sample)] <-
paste(metadata$sample[!grepl("mzXML", metadata$sample)], ".mzXML", sep="")
}
if (!all(metadata$acquisitionmode %in% c("ms", "dia", "dda", "MS", "DIA", "DDA"))){
stop("acquisitionmode in metadata can be MS, DIA or DDA")
} else {
metadata$acquisitionmode <- toupper(metadata$acquisitionmode)
}
}
}
metadata
file <- metadata$sample[f]
if(length(dmzagglom)>1){dmzagglom1<-dmzagglom[1];dmzagglom2<-dmzagglom[2]}else{dmzagglom1<-dmzagglom2<-dmzagglom}
if(length(drtagglom)>1){drtagglom1<-drtagglom[1];drtagglom2<-drtagglom[2]}else{drtagglom1<-drtagglom2<-drtagglom}
if(length(drtclust)>1){drtclust1<-drtclust[1];drtclust2<-drtclust[2]}else{drtclust1<-drtclust2<-drtclust}
if(length(minpeak)>1){minpeak1<-minpeak[1];minpeak2<-minpeak[2]}else{minpeak1<-minpeak2<-minpeak}
if(length(drtgap)>1){drtgap1<-drtgap[1];drtgap2<-drtgap[2]}else{drtgap1<-drtgap2<-drtgap}
if(length(drtminpeak)>1){drtminpeak1<-drtminpeak[1];drtminpeak2<-drtminpeak[2]}else{drtminpeak1<-drtminpeak2<-drtminpeak}
if(length(drtmaxpeak)>1){drtmaxpeak1<-drtmaxpeak[1];drtmaxpeak2<-drtmaxpeak[2]}else{drtmaxpeak1<-drtmaxpeak2<-drtmaxpeak}
if(length(recurs)>1){recurs1<-recurs[1];recurs2<-recurs[2]}else{recurs1<-recurs2<-recurs}
if(length(sb)>1){sb1<-sb[1];sb2<-sb[2]}else{sb1<-sb2<-sb}
if(length(sn)>1){sn1<-sn[1];sn2<-sn[2]}else{sn1<-sn2<-sn}
if(length(minint)>1){minint1<-minint[1];minint2<-minint[2]}else{minint1<-minint2<-minint}
if(length(weight)>1){weight1<-weight[1];weight2<-weight[2]}else{weight1<-weight2<-weight}
if(length(dmzIso)>1){dmzIso1<-dmzIso[1];dmzIso2<-dmzIso[2]}else{dmzIso1<-dmzIso2<-dmzIso}
if(length(drtIso)>1){drtIso1<-drtIso[1];drtIso2<-drtIso[2]}else{drtIso1<-drtIso2<-drtIso}
setwd("H:/Maribel/Paquetes/PruebasLipidMS/LipidMSv3/DatasetPruebaNeg")
metadata <- read.csv("Samples.csv", sep=";")
metadata
metadata <- read.csv("Samples.csv", sep=",")
metadata
file <- metadata$sample[f]
f<-1
file <- metadata$sample[f]
acquisitionmode <- metadata$acquisitionmode[f]
polarity <- "negative"
msobject <- readMSfile(file, polarity)
devtools::load_all("H:/Maribel/Paquetes/LipidMS/LipidMS_v15_3.0.4")
msobject <- readMSfile(file, polarity)
metadata
!all(grepl("mzXML", metadata$sample))
metadata$sample[!grepl("mzXML", metadata$sample)] <-
paste(metadata$sample[!grepl("mzXML", metadata$sample)], ".mzXML", sep="")
metadata
file <- metadata$sample[f]
msobject <- readMSfile(file, polarity)
msobject$metaData$generalMetadata$acquisitionmode <- acquisitionmode
names(msobject$rawData$MS1)
cE <- "0"
msobject <- partitioning(msobject, dmzagglom = dmzagglom1, drtagglom = drtagglom1,
minpeak = minpeak1, mslevel = "MS1", cE = cE)
msobject$processing$MS1$partIndex
mslevel = "MS1"
setwd("H:/Maribel/Paquetes/LipidMS/LipidMS_v15_3.0.4")
getwd()
library(LipidMS)
library(LipidMS)
library(LipidMS)
##### Chroms cer_P neg
load("D:/Maribel/metabolomica/20210315_PatronesLipidos/pos/msobjects.rda.gz")
acqmode <- unlist(lapply(msobjects, function(x) x$metaData$generalMetadata$acquisitionmode))
files <- unlist(lapply(msobjects, function(x) x$metaData$generalMetadata$file))
msobject <- msobjects[[7]]
MS1 <- msobject$rawData$MS1
MS2 <- msobject$rawData$MS2
rt <- c(475, 530)
ppm <- 10
pcodb$Mass[pcodb$total == "36:5"] + adductsTable$mdiff[adductsTable$adduct == "M+H"]
pcodb$Mass[pcodb$total == "36:5"] + adductsTable$mdiff[adductsTable$adduct == "M+Na"]
## MS1
mzMH <- 766.5751
MH <- MS1[mzMH - mzMH*ppm/1e6 <= MS1$mz & mzMH + mzMH*ppm/1e6 >= MS1$mz &
MS1$RT >= rt[1] & MS1$RT <= rt[2],]
MH <- MH[order(MH$RT),]
MH$int <- predict(smooth.spline(MH$int ~ MH$RT),  x = MH$RT, spar = 0.4)$y
mzMNa <- 788.5565
MNa <- MS1[mzMNa - mzMNa*ppm/1e6 <= MS1$mz & mzMNa + mzMNa*ppm/1e6 >= MS1$mz &
MS1$RT >= rt[1] & MS1$RT <= rt[2],]
MNa <- MNa[order(MNa$RT),]
# MNa$int <- predict(smooth.spline(MNa$int ~ MNa$RT),  x = MNa$RT, spar = 0.4)$y
MNa$int <- MNa$int * 5
rtmin <- rt[1]
rtmax <- rt[2]
## MS2
pcodb$Mass[pcodb$total == "36:5"] - 183.06604
library(LipidMS)
## MS2
pcodb$Mass[pcodb$total == "36:5"] - 183.06604
rtmin <- rt[1]
rtmax <- rt[2]
ions <- list(MH)
maxint <- max(unlist(lapply(ions, "[[", "int")), na.rm = T)
colors <- c("black", "red", "green", "blue")
xlab = "RT (sec)"
ylab = "Intensity (%)"
par(mar = c(6, 6, 4, 2), mgp = c(4, 1, 0))
for (i in 1:length(ions)){
time <- ions[[i]]$RT
intensity <- ions[[i]]$int*100/maxint
xlim = c(rtmin, rtmax) # rt limitantes
ylim = c(0, 100)
if (i == 1){
plot(time, intensity, type = "l", col = colors[i], xlim = xlim,
ylim = ylim, las = 1, bty="l", xlab = "", ylab = "",
lwd = 3, cex.lab = 2, cex.axis = 2)
title(xlab = xlab, ylab= ylab, cex.lab = 2)
} else {
lines(time, intensity, type = "l", col = colors[i], xlim = xlim,
ylim = ylim, las = 1, bty="l", lwd = 3)
}
}
legend("topright", c("M+H"), lty = 1, lwd = 3,
col = colors, cex=1, bty="n")
## MS2
pcodb$Mass[pcodb$total == "36:5"] - 183.06604
mzCho <- 104.1075
Cho <- MS2[mzCho - mzCho*ppm/1e6 <= MS2$mz & mzCho  + mzCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
Cho <- Cho[order(Cho$RT),]
Cho$int <- predict(smooth.spline(Cho$int ~ Cho$RT),  x = Cho$RT)$y
mzPCho <- 184.0739
PCho <- MS2[mzPCho - mzPCho*ppm/1e6 <= MS2$mz & mzPCho  + mzPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
PCho <- PCho[order(PCho$RT),]
pcodb$Mass[pcodb$total == "36:5"] - 183.06604
mzNLPCho <- 582.5012
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho <- NLPCho[order(NLPCho$RT),]
NLPCho$int <- predict(smooth.spline(NLPCho$int ~ NLPCho$RT),  x = NLPCho$RT)$y
NLPCho
pcodb$Mass[pcodb$total == "36:6"] - 183.06604
mzNLPCho <- 580.4856
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
pcodb$Mass[pcodb$total == "35:5"] - 183.06604
mzNLPCho <- 580.4856
pcodb$Mass[pcodb$total == "35:6"] - 183.06604
pcodb$Mass[pcodb$total == "35:6"] - 183.06604
pcodb$Mass[pcodb$total == "35:5"] - 183.06604
mzNLPCho <- 568.4856
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
MS2$mz
NLPCho <- MS2[MS2$RT >= rt[1] & MS2$RT <= rt[2],]
View(NLPCho)
pcodb$Mass[pcodb$total == "36:5"] - 183.06604
adductsTable
dgdb$Mass[dgdb$total == "36:5"] -17.00280
mzNLPCho <- 597.4882
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
dgdb$Mass[dgdb$total == "36:4"] -17.00280
mzNLPCho <- 599.5038
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
dgdb$Mass[dgdb$total == "36:6"] -17.00280
mzNLPCho <- 595.4725
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
msobject <- msobjects[[11]]
MS1 <- msobject$rawData$MS1
MS2 <- msobject$rawData$MS2
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
mzNLPCho <- 597.4882
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
mzNLPCho <- 599.5038
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
mzNLPCho <- 595.4725
mzNLPCho
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
mzNLPCho <- 597.4882
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
rt <- c(475, 530)
ppm <- 20
mzNLPCho <- 597.4882
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
mzNLPCho <- 599.5038
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
mzNLPCho <- 595.4725
NLPCho <- MS2[mzNLPCho - mzNLPCho*ppm/1e6 <= MS2$mz & mzNLPCho + mzNLPCho*ppm/1e6 >= MS2$mz &
MS2$RT >= rt[1] & MS2$RT <= rt[2],]
NLPCho
