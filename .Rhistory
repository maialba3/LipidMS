library(LipidMS)
setwd("H:/Maribel/Paquetes/pruebaBatchProcessing/ejemplos")
setwd("H:/Maribel/Paquetes/PruebasLipidMS/LipidMSv3/DatasetPruebaPos")
files <- dir()[grepl("mzXML", dir())]
files
acquisitionmode <- rep("DIA", length(files)) # it assumes you add MS, DDA or DIA to the file names
acquisitionmode[grep("DDA", files)] <- "DDA"
acquisitionmode <- rep("DIA", length(files)) # it assumes you add MS, DDA or DIA to the file names
# otherwise, create a vector such as: acquisitionmode <- c("DIA", "MS", "MS", "MS", "DDA",...)
polarity <- "positive" # change to positive if required
dmzagglom <- 15
drtagglom <- 500
drtclust <- 100
minpeak <- c(5, 3)
drtgap <- 5
drtminpeak <- 15
drtmaxpeak <- c(100, 200)
recurs <- 5
sb <- 2
sn <- 2
minint <- c(1000, 500)
weight <- c(2, 3)
dmzIso <- 5
drtIso <- 5
# Annotation parameters
dmzprecursor <- 5
dmzproducts <- 10
rttol <- 6
coelcutoff <- 0.7
# for single file processing, only samples acquired in DIA or DDA will be processed
files <- files[acquisitionmode %in% c("DIA", "DDA")]
files
acquisitionmode <- acquisitionmode[acquisitionmode %in% c("DIA", "DDA")]
#################
# Peak-picking
msobjects <- list()
f<-1
msobjects[[f]] <- dataProcessing(file = files[f],
acquisitionmode = acquisitionmode[f],
polarity = polarity,
dmzagglom = dmzagglom,
drtagglom = drtagglom,
drtclust = drtclust,
minpeak = minpeak,
drtgap = drtgap,
drtminpeak = drtminpeak,
drtmaxpeak = drtmaxpeak,
recurs = recurs,
sb = sb,
sn = sn,
minint = minint,
weight = weight,
dmzIso = dmzIso,
drtIso = drtIso)
grep("DIA|AIF", files)
msobjects[[f]]$metaData$generalMetadata$polarity
pos <- idPos(msobjects[[f]])
pos <- idPOS(msobjects[[f]])
msobject <-msobjects[[f]]
msobject$metaData$generalMetadata$polarity
msobject$metaData$generalMetadata$polarity != "positive"
pos <- idPOS(msobjects[[f]])
devtools::load_all(".")
file <- "H:/Maribel/Paquetes/PruebasLipidMS/LipidMSv3/DatasetPruebaPos/20200129_QC_AIF_3.mzXML"
acquisitionmode <- "DIA"
polarity<-"positive"
dmzagglom = 15
drtagglom = 500
drtclust = 100
minpeak = c(5, 3)
drtgap = 10
drtminpeak = c(15, 15)
drtmaxpeak = c(100, 200)
recurs = 5
sb = c(3, 2)
sn = 2
minint = c(1000, 100)
weight = c(2, 3)
dmzIso = 5
drtIso = 5
acquisitionmode <- toupper(acquisitionmode)
polarity <- tolower(polarity)
if(length(dmzagglom)>1){dmzagglom1<-dmzagglom[1];dmzagglom2<-dmzagglom[2]}else{dmzagglom1<-dmzagglom2<-dmzagglom}
if(length(drtagglom)>1){drtagglom1<-drtagglom[1];drtagglom2<-drtagglom[2]}else{drtagglom1<-drtagglom2<-drtagglom}
if(length(drtclust)>1){drtclust1<-drtclust[1];drtclust2<-drtclust[2]}else{drtclust1<-drtclust2<-drtclust}
if(length(minpeak)>1){minpeak1<-minpeak[1];minpeak2<-minpeak[2]}else{minpeak1<-minpeak2<-minpeak}
if(length(drtgap)>1){drtgap1<-drtgap[1];drtgap2<-drtgap[2]}else{drtgap1<-drtgap2<-drtgap}
if(length(drtminpeak)>1){drtminpeak1<-drtminpeak[1];drtminpeak2<-drtminpeak[2]}else{drtminpeak1<-drtminpeak2<-drtminpeak}
if(length(drtmaxpeak)>1){drtmaxpeak1<-drtmaxpeak[1];drtmaxpeak2<-drtmaxpeak[2]}else{drtmaxpeak1<-drtmaxpeak2<-drtmaxpeak}
if(length(recurs)>1){recurs1<-recurs[1];recurs2<-recurs[2]}else{recurs1<-recurs2<-recurs}
if(length(sb)>1){sb1<-sb[1];sb2<-sb[2]}else{sb1<-sb2<-sb}
if(length(sn)>1){sn1<-sn[1];sn2<-sn[2]}else{sn1<-sn2<-sn}
if(length(minint)>1){minint1<-minint[1];minint2<-minint[2]}else{minint1<-minint2<-minint}
if(length(weight)>1){weight1<-weight[1];weight2<-weight[2]}else{weight1<-weight2<-weight}
if(length(dmzIso)>1){dmzIso1<-dmzIso[1];dmzIso2<-dmzIso[2]}else{dmzIso1<-dmzIso2<-dmzIso}
if(length(drtIso)>1){drtIso1<-drtIso[1];drtIso2<-drtIso[2]}else{drtIso1<-drtIso2<-drtIso}
msobject <- readMSfile(file)
if (polarity == "positive"){pol <- "+"}else{pol <- "-"}
polarity
unique(msobject$metaData$scansMetadata$polarity)
msobject$MS1[msobject$metaData$scansMetadata$polarity ==
polarity,]
msobject$MS1[msobject$metaData$scansMetadata$polarity ==
pol,]
msobject$metaData$scansMetadata$polarity
msobject$rawData$MS1[msobject$metaData$scansMetadata$polarity ==
pol,]
head(msobject$metaData)
# 1. read data with readMzXmlFile
ms <- readMzXmlData::readMzXmlFile(file.path(file))
# 2. Extract metaData (general and scan by scan)
if (is.null(ms[[1]]$metaData$startTime)){
startTime <- min(unlist(lapply(ms, function(x) x$metaData$retentionTime)))
endTime <- max(unlist(lapply(ms, function(x) x$metaData$retentionTime)))
} else {
startTime <- ms[[1]]$metaData$startTime
endTime <- ms[[1]]$metaData$endTime
}
collisionEnergies <- sort(unique(unlist(lapply(ms, function(x) if(!is.null(x$metaData$collisionEnergy)){x$metaData$collisionEnergy} else {0}))))
collisionEnergies
generalMetadata <- list(file = file, scans = length(ms),
startTime = startTime,
endTime = endTime,
collisionEnergies = collisionEnergies)
generalMetadata
scansMetadata <-
data.frame(msLevel = unlist(lapply(ms, function(x) if(!is.null(x$metaData$msLevel)){x$metaData$msLevel} else {NA})),
polarity = unlist(lapply(ms, function(x) if(!is.null(x$metaData$polarity)){x$metaData$polarity} else {NA})),
scanType = unlist(lapply(ms, function(x) if(!is.null(x$metaData$scanType)){x$metaData$scanType} else {NA})),
centroided = unlist(lapply(ms, function(x) if(!is.null(x$metaData$centroided)){x$metaData$centroided} else {NA})),
RT = unlist(lapply(ms, function(x) if(!is.null(x$metaData$retentionTime)){x$metaData$retentionTime} else {NA})),
peaksCount = unlist(lapply(ms, function(x) if(!is.null(x$metaData$peaksCount)){x$metaData$peaksCount} else {NA})),
lowMz = unlist(lapply(ms, function(x) if(!is.null(x$metaData$lowMz)){x$metaData$lowMz} else {NA})),
highMz = unlist(lapply(ms, function(x) if(!is.null(x$metaData$highMz)){x$metaData$highMz} else {NA})),
basePeakMz = unlist(lapply(ms, function(x) if(!is.null(x$metaData$basePeakMz)){x$metaData$basePeakMz} else {NA})),
basePeakInt = unlist(lapply(ms, function(x) if(!is.null(x$metaData$basePeakInt)){x$metaData$basePeakInt} else {NA})),
totIonCurrent = unlist(lapply(ms, function(x) if(!is.null(x$metaData$totIonCurrent)){x$metaData$totIonCurrent} else {NA})),
precursor = unlist(lapply(ms, function(x) if(!is.null(x$metaData$precursorMz)){x$metaData$precursorMz} else {NA})),
collisionEnergy = unlist(lapply(ms, function(x) if(!is.null(x$metaData$collisionEnergy)){x$metaData$collisionEnergy} else {0})),
stringsAsFactors = FALSE)
scanOrder <- rep(0,nrow(scansMetadata))
for (l in unique(scansMetadata$msLevel)){
for (c in unique(scansMetadata$collisionEnergy))
scanOrder[scansMetadata$msLevel == l & scansMetadata$collisionEnergy == c] <-
as.numeric(factor(scansMetadata$RT[scansMetadata$msLevel == l & scansMetadata$collisionEnergy == c]))
}
scansMetadata$Scan <- scanOrder
# 3. Generate msobject
msobject <- list()
msobject$metaData <- list(generalMetadata = generalMetadata,
scansMetadata = scansMetadata)
msobject$processing <- list()
# 4. Extract scans
mz <- unlist(lapply(ms, function(x) x$spectrum$mass))
int <- unlist(lapply(ms, function(x) x$spectrum$intensity))
RT <- unlist(mapply(rep, scansMetadata$RT, scansMetadata$peaksCount))
mslevel <- unlist(mapply(rep, scansMetadata$msLevel, scansMetadata$peaksCount))
collisionEnergy <- unlist(mapply(rep, scansMetadata$collisionEnergy, scansMetadata$peaksCount))
scannum <- unlist(mapply(rep, scansMetadata$Scan, scansMetadata$peaksCount))
scans <- data.frame(mz = mz, int = int, RT = RT, mslevel = mslevel,
collisionEnergy = collisionEnergy,
part = 0, clust = 0, peak = 0, Scan = scannum)
head(scans)
dim(scans)
dim(scansMetadata)
polarity
which(scansMetadata$polarity == pol)
keepPolarity <- which(scansMetadata$polarity == pol)
keepPolarity <- scansMetadata$Sca[which(scansMetadata$polarity == pol)]
keepPolarity
keepPolarity <- scansMetadata$Scan[which(scansMetadata$polarity == pol)]
keepPolarity
scansMetadata
polarity
length(unique(scansMetadata$polarity))
scansMetadata$polarity
unique(scansMetadata$polarity) != pol
devtools::load_all(".")
msobject <- readMSfile(file, polarity)
msobject$metaData$generalMetadata$acquisitionmode <- acquisitionmode
msobject$metaData$generalMetadata
msobject$metaData$generalMetadata$polarity
#################
# Peak-picking
msobjects <- list()
files <- file
f<-1
msobjects[[f]] <- dataProcessing(file = files[f],
acquisitionmode = acquisitionmode[f],
polarity = polarity,
dmzagglom = dmzagglom,
drtagglom = drtagglom,
drtclust = drtclust,
minpeak = minpeak,
drtgap = drtgap,
drtminpeak = drtminpeak,
drtmaxpeak = drtmaxpeak,
recurs = recurs,
sb = sb,
sn = sn,
minint = minint,
weight = weight,
dmzIso = dmzIso,
drtIso = drtIso)
m<-1
msobjects[[m]] <- idPOS(msobjects[[m]],
ppm_precursor = dmzprecursor,
ppm_products = dmzproducts,
rttol = rttol,
coelCutoff = coelcutoff,
lipidClasses = c("MG", "LPC", "LPE", "PC",
"PE", "Sph", "SphP", "Cer",
"SM", "Carnitines", "CE",
"DG", "TG"))
dmzagglom <- 15
drtagglom <- 500
drtclust <- 100
minpeak <- c(5, 3)
drtgap <- 5
drtminpeak <- 15
drtmaxpeak <- c(100, 200)
recurs <- 5
sb <- 2
sn <- 2
minint <- c(1000, 500)
weight <- c(2, 3)
dmzIso <- 5
drtIso <- 5
# Annotation parameters
dmzprecursor <- 5
dmzproducts <- 10
rttol <- 6
coelcutoff <- 0.7
msobjects[[m]] <- idPOS(msobjects[[m]],
ppm_precursor = dmzprecursor,
ppm_products = dmzproducts,
rttol = rttol,
coelCutoff = coelcutoff,
lipidClasses = c("MG", "LPC", "LPE", "PC",
"PE", "Sph", "SphP", "Cer",
"SM", "Carnitines", "CE",
"DG", "TG"))
msobjects[[m]]$metaData$generalMetadata$polarity
View(msobjects[[m]]$annotation$results)
msobjects[[m]]$metaData$generalMetadata$polarity
msobject$metaData$generalMetadata$polarity
msobjects[[f]] <- dataProcessing(file = files[f],
acquisitionmode = acquisitionmode[f],
polarity = "negative",
dmzagglom = dmzagglom,
drtagglom = drtagglom,
drtclust = drtclust,
minpeak = minpeak,
drtgap = drtgap,
drtminpeak = drtminpeak,
drtmaxpeak = drtmaxpeak,
recurs = recurs,
sb = sb,
sn = sn,
minint = minint,
weight = weight,
dmzIso = dmzIso,
drtIso = drtIso)
mobjects[[1]]
msobjects[[1]]
polarity("negative")
polarity<-"negative"
msobject <- readMSfile(file, polarity)
msobject
ms <- readMzXmlData::readMzXmlFile(file.path(file))
# 2. Extract metaData (general and scan by scan)
if (is.null(ms[[1]]$metaData$startTime)){
startTime <- min(unlist(lapply(ms, function(x) x$metaData$retentionTime)))
endTime <- max(unlist(lapply(ms, function(x) x$metaData$retentionTime)))
} else {
startTime <- ms[[1]]$metaData$startTime
endTime <- ms[[1]]$metaData$endTime
}
collisionEnergies <- sort(unique(unlist(lapply(ms, function(x) if(!is.null(x$metaData$collisionEnergy)){x$metaData$collisionEnergy} else {0}))))
generalMetadata <- list(file = file, scans = length(ms),
startTime = startTime,
endTime = endTime,
collisionEnergies = collisionEnergies)
scansMetadata <-
data.frame(msLevel = unlist(lapply(ms, function(x) if(!is.null(x$metaData$msLevel)){x$metaData$msLevel} else {NA})),
polarity = unlist(lapply(ms, function(x) if(!is.null(x$metaData$polarity)){x$metaData$polarity} else {NA})),
scanType = unlist(lapply(ms, function(x) if(!is.null(x$metaData$scanType)){x$metaData$scanType} else {NA})),
centroided = unlist(lapply(ms, function(x) if(!is.null(x$metaData$centroided)){x$metaData$centroided} else {NA})),
RT = unlist(lapply(ms, function(x) if(!is.null(x$metaData$retentionTime)){x$metaData$retentionTime} else {NA})),
peaksCount = unlist(lapply(ms, function(x) if(!is.null(x$metaData$peaksCount)){x$metaData$peaksCount} else {NA})),
lowMz = unlist(lapply(ms, function(x) if(!is.null(x$metaData$lowMz)){x$metaData$lowMz} else {NA})),
highMz = unlist(lapply(ms, function(x) if(!is.null(x$metaData$highMz)){x$metaData$highMz} else {NA})),
basePeakMz = unlist(lapply(ms, function(x) if(!is.null(x$metaData$basePeakMz)){x$metaData$basePeakMz} else {NA})),
basePeakInt = unlist(lapply(ms, function(x) if(!is.null(x$metaData$basePeakInt)){x$metaData$basePeakInt} else {NA})),
totIonCurrent = unlist(lapply(ms, function(x) if(!is.null(x$metaData$totIonCurrent)){x$metaData$totIonCurrent} else {NA})),
precursor = unlist(lapply(ms, function(x) if(!is.null(x$metaData$precursorMz)){x$metaData$precursorMz} else {NA})),
collisionEnergy = unlist(lapply(ms, function(x) if(!is.null(x$metaData$collisionEnergy)){x$metaData$collisionEnergy} else {0})),
stringsAsFactors = FALSE)
scanOrder <- rep(0,nrow(scansMetadata))
for (l in unique(scansMetadata$msLevel)){
for (c in unique(scansMetadata$collisionEnergy))
scanOrder[scansMetadata$msLevel == l & scansMetadata$collisionEnergy == c] <-
as.numeric(factor(scansMetadata$RT[scansMetadata$msLevel == l & scansMetadata$collisionEnergy == c]))
}
scansMetadata$Scan <- scanOrder
# 3. Extract scans
mz <- unlist(lapply(ms, function(x) x$spectrum$mass))
int <- unlist(lapply(ms, function(x) x$spectrum$intensity))
RT <- unlist(mapply(rep, scansMetadata$RT, scansMetadata$peaksCount))
mslevel <- unlist(mapply(rep, scansMetadata$msLevel, scansMetadata$peaksCount))
collisionEnergy <- unlist(mapply(rep, scansMetadata$collisionEnergy, scansMetadata$peaksCount))
scannum <- unlist(mapply(rep, scansMetadata$Scan, scansMetadata$peaksCount))
scans <- data.frame(mz = mz, int = int, RT = RT, mslevel = mslevel,
collisionEnergy = collisionEnergy,
part = 0, clust = 0, peak = 0, Scan = scannum)
if (polarity == "positive"){pol <- "+"}else{pol <- "-"}
keepPolarity <- scansMetadata$Scan[which(scansMetadata$polarity == pol)]
keepPolarity
keepPolarity <- scansMetadata$Scan[which(scansMetadata$polarity == pol)]
scansMetadata <- scansMetadata[scansMetadata$Scan %in% keepPolarity,]
scans <- scans[scans$Scan %in% keepPolarity,]
generalMetadata$polarity <- polarity
length(unique(scansMetadata$polarity))
unique(scansMetadata$polarity)
unique(scansMetadata$polarity) != pol
nrow(scans)
unique(scansMetadata$polarity)
devtools::load_all(".")
msobjects[[f]] <- dataProcessing(file = files[f],
acquisitionmode = acquisitionmode[f],
polarity = polarity,
dmzagglom = dmzagglom,
drtagglom = drtagglom,
drtclust = drtclust,
minpeak = minpeak,
drtgap = drtgap,
drtminpeak = drtminpeak,
drtmaxpeak = drtmaxpeak,
recurs = recurs,
sb = sb,
sn = sn,
minint = minint,
weight = weight,
dmzIso = dmzIso,
drtIso = drtIso)
msobjects[[f]] <- dataProcessing(file = files[f],
acquisitionmode = acquisitionmode[f],
polarity = " positive",
dmzagglom = dmzagglom,
drtagglom = drtagglom,
drtclust = drtclust,
minpeak = minpeak,
drtgap = drtgap,
drtminpeak = drtminpeak,
drtmaxpeak = drtmaxpeak,
recurs = recurs,
sb = sb,
sn = sn,
minint = minint,
weight = weight,
dmzIso = dmzIso,
drtIso = drtIso)
setwd("H:/Maribel/Paquetes/PruebasLipidMS/LipidMSv3/pruebaLipidMSnegBatch")
files <- dir()[grepl("mzXML", dir())]
files
files <- files[c(1,3,6,7,15)]
files
# csv file with 3 columns: sample (mzXML file names), acquisitionmode
# (MS, DIA or DDA) and sampletype (QC, group1, group2, etc.)
metadata <- read.csv("Metadata.csv", sep=",", dec = ".")
metadata
polarity<-"negative"
dmzagglom <- 15
drtagglom <- 500
drtclust <- 100
minpeak <- c(5, 3)
drtgap <- 5
drtminpeak <- 15
drtmaxpeak <- c(100, 200)
recurs <- 5
sb <- 2
sn <- 2
minint <- c(1000, 500)
weight <- c(2, 3)
dmzIso <- 5
drtIso <- 5
###################
# Batch processing
dmzalign <- 5
drtalign <- 30
span <- 0.4
minsamplesfracalign <- 0.75
dmzgroup <- 5
drtagglomgroup <- 30
drtgroup <- 15
minsamplesfracgroup <- 0.25
parallel <- TRUE
ncores <- 2
###################
# Peak-picking
msbatch <- batchdataProcessing(metadata = metadata,
polarity = polarity,
dmzagglom = dmzagglom,
drtagglom = drtagglom,
drtclust = drtclust,
minpeak = minpeak,
drtgap = drtgap,
drtminpeak = drtminpeak,
drtmaxpeak = drtmaxpeak,
recurs = recurs,
sb = sb,
sn = sn,
minint = minint,
weight = weight,
dmzIso = dmzIso,
drtIso = drtIso,
parallel = parallel,
ncores = ncores)
###################
# Alignment
msbatch <- alignmsbatch(msbatch, dmz = dmzalign, drt = drtalign, span = span,
minsamplesfrac = minsamplesfracalign,
parallel = parallel, ncores = ncores)
###################
# Grouping
msbatch <- groupmsbatch(msbatch, dmz = dmzgroup, drtagglom = drtagglomgroup,
drt = drtgroup, minsamplesfrac = minsamplesfracgroup,
parallel = parallel, ncores = ncores)
#####################
# Fill missing peaks
msbatch <- fillpeaksmsbatch(msbatch)
###################
# Lipid Annotation
msbatch <- annotatemsbatch(msbatch)
###################
# features
peaklist <- msbatch$features
msbatch$msobjects[[1]]$metaData$generalMetadata$polarity
msbatch$msobjects[[2]]$metaData$generalMetadata$polarity
library(LipidMS)
library(LipidMS)
devtools::load_all(".")
joinAnnotationResults
1e-4/1
1e-4/1*1000
1e-4*1000
1e-4*10000
1e-4==1/10000
library(LipidMS)
citation("LipidMS")
LipidMS::adductsTable
document()
roxygen2::document()
devtools::load_all(".")
update.packages("roxygen2")
install.packages("roxygen2")
library(roxygen2)
roxygen2::roxygenize()
library(LipidMS)
library(LipidMS)
