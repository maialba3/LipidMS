dbs[["pgdb"]] <- LipidMS::pgdb
dbs[["pidb"]] <- LipidMS::pidb
dbs[["psdb"]] <- LipidMS::psdb
dbs[["padb"]] <- LipidMS::padb
dbs[["dgdb"]] <- LipidMS::dgdb
dbs[["tgdb"]] <- LipidMS::tgdb
dbs[["cldb"]] <- LipidMS::cldb
dbs[["badb"]] <- LipidMS::badb
dbs[["baconjdb"]] <- LipidMS::baconjdb
dbs[["nlsphdb"]] <- LipidMS::nlsphdb
dbs[["adductsTable"]] <- LipidMS::adductsTable
return(dbs)
}
# getInclusionList
#' Obtain an inclusion list from the annotation results
#'
#' Obtain an inclusion list from the annotation results.
#'
#' @param results data frame. Output of identification functions.
#' @param adductsTable data frame with the adducts allowed and their mass
#' difference.
#'
#' @return Data frame with 6 columns: formula, RT, neutral mass, m/z, adduct
#' and the compound name.
#'
#' @examples
#' \dontrun{
#' devtools::install_github("maialba3/LipidMSdata2")
#'
#' library(LipidMS)
#' msobject <- idPOS(LipidMSdata2::msobjectDIApos)
#' getInclusionList(msobject)
#' }
#'
#' @author M Isabel Alcoriza-Balaguer <maribel_alcoriza@iislafe.es>
getInclusionList <- function(results, adductsTable = LipidMS::adductsTable){
Form_Mn <- apply(results, 1, getFormula)
if (class(Form_Mn) == "matrix"){
new <- list()
for (i in 1:ncol(Form_Mn)){
new[[i]] <- c(Form_Mn[1,i], Form_Mn[2,i])
}
Form_Mn <- new
}
na <- which(unlist(lapply(Form_Mn, length)) == 0)
if (length(na) > 0){
Form_Mn[[na]] <- c(NA, NA)
}
Formula <- unlist(lapply(Form_Mn, "[[", 1))
RT <- results$RT
Mn <- as.numeric(unlist(lapply(Form_Mn, "[[", 2)))
adducts <- sapply(as.vector(results$Adduct), strsplit, ";")
mzs <- rep(list(vector()), nrow(results))
for (i in 1:nrow(results)){
ad <- adducts[[i]]
for (a in 1:length(ad)){
adinfo <- adductsTable[adductsTable$adduct == ad[a],]
mz <- (adinfo$n*Mn[i]+adinfo$mdif)/abs(adinfo$charge)
mzs[[i]] <- append(mzs[[i]], mz)
}
}
Name <- results$ID
inclusionList <- vector()
for (i in 1:nrow(results)){
for (a in 1:length(adducts[[i]])){
inclusionList <- rbind(inclusionList,
data.frame(Formula[i], RT[i], Mn[i],
mzs[[i]][a], adducts[[i]][a],
Name[i], stringsAsFactors = F))
}
}
colnames(inclusionList) <- c("Formula", "RT", "Mn", "m.z", "Adduct", "Name")
inclusionList <- unique(inclusionList)
return(inclusionList)
}
# searchIsotopes
#' Target isotopes search
#'
#' This function uses annotation results of an unlabelled sample to search
#' for labelled compounds in a labelled sample.
#'
#' @param msobject a msobject generated by any of the identification functions.
#' @param label isotope employed for the experiment. It can be "13C" or "D".
#' @param adductsTable adducts table employed for lipids annotation.
#' @param rttol rt window in seconds.
#' @param ppm mass error tolerance.
#' @param coelCutoff coelution score threshold between isotopes. By default, 0.8.
#'
#' @return List with the isotopes for each compound in the results data frame.
#'
#' @author M Isabel Alcoriza-Balaguer <maribel_alcoriza@iislafe.es>
searchIsotopes <- function(msobject,
label,
adductsTable = LipidMS::adductsTable,
rttol = 10,
ppm = 10,
coelCutoff = 0.8){
results <- msobject$results
MS1 <- msobject$peaklist$MS1
Form_Mn <- apply(results, 1, getFormula)
formula <- unlist(lapply(Form_Mn, "[[", "Formula"))
results$Formula <- formula
comp <- do.call(rbind, sapply(results$Formula, function(x) {
c <- CHNOSZ::makeup(x)
c <- c[c("C", "H", "N", "O", "P")]
names(c) <- c("C", "H", "N", "O", "P")
return(as.data.frame(c))
}))
colnames(comp) <- c("C", "H", "N", "O", "P")
results$C <- comp[,"C"]
results$H <- comp[,"H"]
if (label == "13C"){
massdiff <- 1.0033548
label <- "C"
} else if (label == "D"){
massdiff <- 1.006277
label <- "H"
}
isotopes <- apply(results, 1, function(x){
mz <- as.numeric(x["m.z"])
rt <- as.numeric(x["RT"])
top <- as.numeric(x[label])
intensities <- vector()
mzs <- vector()
rts <- vector()
for (i in 0:top){
if (nrow(MS1[abs(MS1$RT - rt) < rttol,]) > 0){
subsetMS1 <- MS1[abs(MS1$RT - rt) < rttol,]
m <- mzMatch(mz+i*massdiff, subsetMS1[abs(subsetMS1$RT - rt) <
rttol, "m.z"], ppm)
if (length(m) > 0){
m <- m[seq(1, length(m), 2)]
sel <- subsetMS1[m,]
sel$coelScore <- coelutionScore(as.character(x["peakID"]), sel$peakID, msobject$MS1)
sel <- sel[sel$coelScore >= coelCutoff,]
if (nrow(sel) > 0){
int <- sel[order(abs(sel$RT - rt)),"int"][1]
RT <- sel[order(abs(sel$RT - rt)),"RT"][1]
MZ <- sel[order(abs(sel$RT - rt)),"m.z"][1]
} else {
int <- 0
RT <- rt
MZ <- mz+i*massdiff
}
} else {
int <- 0
RT <- rt
MZ <- mz+i*massdiff
}
} else {
int <- 0
RT <- rt
MZ <- mz+i*massdiff
}
intensities <- append(intensities, int)
mzs <- append(mzs, MZ)
rts <- append(rts, RT)
}
adduct <- unlist(strsplit(as.character(x["Adducts"]), ";"))[1]
return(data.frame(Name = paste(x["ID"], " [M+", 0:top, "]",
sep = ""),
Adduct = rep(adduct, length(mzs)),
Formula = rep(x["Formula"], length(mzs)),
m.z = mzs, RT = rts,  int = intensities,
stringsAsFactors = F))
})
return(isotopes)
}
prec
prec <- as.numeric(unlist(sapply(precursor, mzMatch, ssrawMS$m.z, ppm = 10)))
prec
which.min(prec[seq(1, length(prec), 2)])
minppm <- which.min(prec[seq(1, length(prec), 2)])
minppm
minppm <- which.min(prec[seq(2, length(prec), 2)])
minppm
minppm <- which.min(prec[seq(2, length(prec), 2)])
prec <- prec[seq(1, length(prec), 2)][minppm]
mzprec <- ssrawMS$m.z[mz1p]
mzprec <- ssrawMS$m.z[prec]
mzprec
minppm <- which.min(prec[seq(2, length(prec), 2)])
prec <- prec[seq(1, length(prec), 2)][minppm]
minppm <- which.min(prec[seq(2, length(prec), 2)])
prec <- as.numeric(unlist(sapply(precursor, mzMatch, ssrawMS$m.z, ppm = 10)))
minppm <- which.min(prec[seq(2, length(prec), 2)])
minppm
prec <- prec[seq(1, length(prec), 2)][minppm]
prec
mzprec <- ssrawMS$m.z[prec]
mzprec
nameprec <- paste(round(mzprec, 3), "_precursor", sep="")
nameprec
if (ssrawMS$color[prec] == "black"){
ssrawMS$color[prec] <- colorsMS1[1]
namesmz2 <- c(namesmz2, nameprec)
}
colors2 <- ssrawMS$color[ssrawMS$color != "black"]
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
ssrawMS$m.z
ssrawMS$color
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 122, 20), labels = seq(0, 120, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
namesmz2
prec <- as.numeric(unlist(sapply(precursor, mzMatch, ssrawMS$m.z, ppm = 10)))
if (length(prec) > 0){
minppm <- which.min(prec[seq(2, length(prec), 2)])
prec <- prec[seq(1, length(prec), 2)][minppm]
mzprec <- ssrawMS$m.z[prec]
nameprec <- paste(round(mzprec, 3), "_precursor", sep="")
if (ssrawMS$color[prec] == "black"){
ssrawMS$color[prec] <- colorsMS1[1]
namesmz2 <- c(namesmz2, nameprec)
}
}
colors2 <- ssrawMS$color[ssrawMS$color != "black"]
colors2
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 122, 20), labels = seq(0, 120, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
namesmz2
prec <- as.numeric(unlist(sapply(precursor, mzMatch, ssrawMS$m.z, ppm = 10)))
prec
minppm <- which.min(prec[seq(2, length(prec), 2)])
prec <- prec[seq(1, length(prec), 2)][minppm]
mzprec <- ssrawMS$m.z[prec]
nameprec <- paste(round(mzprec, 3), "_precursor", sep="")
nameprec
ssrawMS$color[prec]
ssrawMS[prec,]
colorsMS1[1]
# subset raw data
ssrawMS <- rawMS[rawMS$peakID == s,]
ssmaxrawMS <- max(ssrawMS$int)
ssrawMS$int <- ssrawMS$int*100/max(ssrawMS$int)
ssrawMS$int[ssrawMS$int < 2] <- ssrawMS$int[ssrawMS$int < 2] + 2 # to improve visualization
mz2 <- peaksMS2[scansMS2 == s]
namesmz2 <- namesMS2[scansMS2 == s]
namesmz2 <- namesmz2[order(mz2, decreasing = FALSE)]
mz2 <- mz2[order(mz2, decreasing = FALSE)]
# assign colors
ssrawMS$color <- "black"
ssrawMS$color[ssrawMS$m.z %in% mz2] <- colorsMS2[1:sum(ssrawMS$m.z %in% mz2)]
ssrawMS[prec,]
# Find precursor in the MS/MS spectrum
scanprec <- unlist(strsplit(s, "_"))
collisionenergy <- as.numeric(scanprec[2])
scanprec <- as.numeric(scanprec[3])
precursor <- msobject$metaData$scansMetadata$precursor[
which(msobject$metaData$scansMetadata$msLevel == 2 &
msobject$metaData$scansMetadata$collisionEnergy == collisionenergy)[scanprec]]
prec <- as.numeric(unlist(sapply(precursor, mzMatch, ssrawMS$m.z, ppm = 10)))
prec
minppm <- which.min(prec[seq(2, length(prec), 2)])
prec <- prec[seq(1, length(prec), 2)][minppm]
mzprec <- ssrawMS$m.z[prec]
nameprec <- paste(round(mzprec, 3), "_precursor", sep="")
ssrawMS$color[prec]
ssrawMS$color[prec] <- colorsMS1[1]
namesmz2 <- c(namesmz2, nameprec)
namesmz2
colors2 <- ssrawMS$color[ssrawMS$color != "black"]
colors2
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 122, 20), labels = seq(0, 120, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
ssrawMS$color
# clean
ssrawMSclean <- ssrawMS[ssrawMS$color != "black",]
plot(ssrawMSclean$m.z, ssrawMSclean$int, type = "h",
col = scales::alpha(ssrawMSclean$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1.5, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 102, 20), labels = seq(0, 100, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
ssrawMS$lwd <- 1
ssrawMS$lwd[ssrawMS$color != "black"] <- 1.5
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = ssrawMS$lwd, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
ssrawMS$lwd
ssrawMS$lwd <- 1
ssrawMS$lwd[ssrawMS$color != "black"] <- 2
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = ssrawMS$lwd, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
ssrawMS$lwd
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = ssrawMS$lwd, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 122, 20), labels = seq(0, 120, 20))
ssrawMS$lwd <- 0.5
ssrawMS$lwd[ssrawMS$color != "black"] <- 2
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = ssrawMS$lwd, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = ssrawMS$lwd, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
ssrawMS
tail(ssrawMS, 50)
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = as.numeric(ssrawMS$lwd), ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 122, 20), labels = seq(0, 120, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 0.7),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = as.numeric(ssrawMS$lwd), ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 0.5),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = as.numeric(ssrawMS$lwd), ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 0.5),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = c(1, 2), ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h",
col = scales::alpha(ssrawMS$color, 0.7),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
blacks <- ssrawMS$color != "black"
blacks <- ssrawMS$color == "black"
#plot
plot(ssrawMS$m.z[blacks], ssrawMS$int[blacks], type = "h",
col = scales::alpha(ssrawMS$color[blacks], 0.7),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
blacks <- ssrawMS$color == "black"
blacks
#plot
plot(ssrawMS$m.z[blacks], ssrawMS$int[blacks], type = "h",
col = scales::alpha(ssrawMS$color[blacks], 0.7),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
lines(ssrawMS$m.z[!blacks], ssrawMS$int[!blacks], type = "h",
col = scales::alpha(ssrawMS$color[!blacks], 0.7))
#plot
plot(ssrawMS$m.z[blacks], ssrawMS$int[blacks], type = "h",
col = scales::alpha(ssrawMS$color[blacks], 0.7),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
lines(ssrawMS$m.z[!blacks], ssrawMS$int[!blacks], type = "h",
col = scales::alpha(ssrawMS$color[!blacks], 1))
# clean
ssrawMSclean <- ssrawMS[!blacks,]
plot(ssrawMSclean$m.z, ssrawMSclean$int, type = "h",
col = scales::alpha(ssrawMSclean$color, 0.7),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1.5, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 102, 20), labels = seq(0, 100, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
plot(ssrawMSclean$m.z, ssrawMSclean$int, type = "h",
col = scales::alpha(ssrawMSclean$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1.5, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 102, 20), labels = seq(0, 100, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
library(LipidMS)
msobject$detailsAnnotation$TG$coelfrags[[5]]
View(msobject$detailsAnnotation$TG$coelfrags[[5]])
summary(msobject$detailsAnnotation$TG$coelfrags[[5]]$int)
msobject$detailsAnnotation$TG$candidates
View(msobject$detailsAnnotation$TG$coelfrags[[8]])
msobject$processing$MS1$parameters$minpeak
View(msobject$peaklist$MS1)
msobject$metaData$scansMetadata$precursor
msobject$metaData$scansMetadata$precursor[msobject$metaData$scansMetadata$precursor> 876.75 & msobject$metaData$scansMetadata$precursor < 876.85]
msobject$metaData$scansMetadata$precursor[which(msobject$metaData$scansMetadata$precursor> 876.75 & msobject$metaData$scansMetadata$precursor < 876.85, na.action = omit)]
msobject$metaData$scansMetadata$precursor[which(msobject$metaData$scansMetadata$precursor> 876.75 & msobject$metaData$scansMetadata$precursor < 876.85)]
msobject$metaData$scansMetadata[msobject$metaData$scansMetadata$precursor %in% c(876.8011, 876.8013),]
msobject$metaData$scansMetadata[which(msobject$metaData$scansMetadata$precursor> 876.75 & msobject$metaData$scansMetadata$precursor < 876.85),]
