if (p == 1){
plot(toplot$RT, toplot$int, type = "l", col = scales::alpha(colorsMS2[p], 0.8),
xlim = c(minrt1-5, maxrt1+5), ylim = c(0, 110),
lwd = 2.5, ylab = "Rel. Intensity", xlab = "RT (sec)",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"), sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 5)
} else {
graphics::lines(toplot$RT, toplot$int, col = scales::alpha(colorsMS2[p], 0.8), lwd = 2.5,
lty = 5)
}
}
graphics::legend("topright", legend=namesMS2,
col=colorsMS2[1:length(peaksMS2)], lty = 5, lwd = 2, cex=0.6)
graphics::legend("bottomright", title = "Max. intensity",
legend=formatC(ints2, format = "e", digits = 2),
col=colorsMS2[1:length(peaksMS2)], lty = 5, lwd = 2, cex=0.6)
# if data is DDA
} else if (msobject$metaData$generalMetadata$acquisitionmode == "DDA"){
# for each scan
for (s in unique(rawMS$peakID)){
# subset raw data
ssrawMS <- rawMS[rawMS$peakID == s,]
ssmaxrawMS <- max(ssrawMS$int)
ssrawMS$int <- ssrawMS$int*100/max(ssrawMS$int)
ssrawMS$int[ssrawMS$int < 2] <- ssrawMS$int[ssrawMS$int < 2] + 2
mz2 <- peaksMS2[scansMS2 == s]
namesmz2 <- namesMS2[scansMS2 == s]
namesmz2 <- namesmz2[order(mz2, decreasing = FALSE)]
mz2 <- mz2[order(mz2, decreasing = FALSE)]
# assign colors
ssrawMS$color <- "black"
ssrawMS$color[ssrawMS$m.z %in% mz2] <- colorsMS2[1:sum(ssrawMS$m.z %in% mz2)]
# Find precursor in the MS/MS spectrum
scanprec <- unlist(strsplit(s, "_"))
collisionenergy <- as.numeric(scanprec[2])
scanprec <- as.numeric(scanprec[3])
precursor <- msobject$metaData$scansMetadata$precursor[
which(msobject$metaData$scansMetadata$msLevel == 2 &
msobject$metaData$scansMetadata$collisionEnergy == collisionenergy)[scanprec]]
prec <- as.numeric(unlist(sapply(precursor, mzMatch, ssrawMS$m.z, ppm = 10)))
if (length(prec) > 0){
prec <- prec[seq(1, length(prec), 2)]
mzprec <- ssrawMS$m.z[mz1p]
nameprec <- paste(round(mzprec, 3), "_precursor", sep="")
if (ssrawMS$color[prec] == "black"){
ssrawMS$color[prec] <- colorsMS2[length(namesmz2)+1]
namesmz2 <- c(namesmz2, nameprec)
}
}
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h", col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 122, 20), labels = seq(0, 120, 20))
graphics::legend("topright", legend=namesmz2,
col=colorsMS2[1:length(namesmz2)], lty = 1, lwd = 2, cex=0.6)
# clean
ssrawMSclean <- ssrawMS[ssrawMS$color != "black",]
plot(ssrawMSclean$m.z, ssrawMSclean$int, type = "h",
col = scales::alpha(ssrawMSclean$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1.5, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 102, 20), labels = seq(0, 100, 20))
graphics::legend("topright", legend=namesmz2,
col=colorsMS2[1:length(namesmz2)], lty = 1, lwd = 2, cex=0.6)
}
}
}
precursor
colors2 <- ssrawMS$color[ssrawMS$color "black"]
colors2 <- ssrawMS$color[ssrawMS$color != "black"]
colors2
results <- results[-toremove,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-1,]
results <- results[-toremove,]
results <- results[-toremove,]
r <- results$peakID[1]
rclass <- results$Class[1]
############################################################################
# MS1 peaks
toremove <- which(results$peakID == r & results$Class == rclass)
parent <- results[results$peakID == r & results$Class == rclass,]
if (nrow(parent) > 1){
parent$ID[1] <- paste(parent$ID, collapse = "|")
parent$peakID[1] <- paste(unique(parent$peakID), collapse = "|")
parent <- parent[1,]
}
adducts <- unlist(strsplit(parent$Adducts, ";"))
ms1 <- c()
for (a in adducts){
ss <- msobject$detailsAnnotation[[parent$Class]]$candidates
ss <- ss[grepl(gsub("+", "\\+", as.character(paste("^", a, sep="")), fixed = TRUE),
msobject$detailsAnnotation[[parent$Class]]$candidates$adducts),]
ss <- ss[ss$cb == parent$CDB,]
ss <- ss[order(abs(ss$RT - parent$RT), decreasing = FALSE),]
ms1 <- rbind(ms1, ss[1,])
}
ms1$adducts <- as.character(sapply(ms1$adducts, function(x) unlist(strsplit(x, ";"))[[1]]))
peaksMS1 <- ms1$peakID
mzpeaksMS1 <- ms1$m.z # to use in case data is DDA
namesMS1 <- paste(as.character(round(ms1$m.z, 3)), ms1$adducts, sep="_")
############################################################################
# MS2 peaks
peaksMS2 <- c()
scansMS2 <- c() # to use in case data is DDA
namesMS2 <- c()
class <- c()
chains <- c()
# get index for all adducts
c <- which(msobject$detailsAnnotation[[parent$Class]]$candidates$peakID %in% ms1$peakID)
# extract class fragments
if ("classfragments" %in% names(msobject$detailsAnnotation[[parent$Class]])){
class <- do.call(rbind, msobject$detailsAnnotation[[parent$Class]]$classfragments[c])
if (length(class) > 0){
if (msobject$metaData$generalMetadata$acquisitionmode == "DIA"){
peaksMS2 <- c(peaksMS2, class$peakID)
} else if (msobject$metaData$generalMetadata$acquisitionmode == "DDA"){
peaksMS2 <- c(peaksMS2, class$m.z)
scansMS2 <- c(scansMS2, class$peakID)
}
namesMS2 <- c(namesMS2, paste(as.character(round(class$m.z, 3)), "class fragment", sep="_"))
}
}
# extract chain fragments
if ("chainfragments" %in% names(msobject$detailsAnnotation[[parent$Class]])){
if (msobject$metaData$generalMetadata$acquisitionmode == "DIA"){
for (i in c){
ch <- c()
if (length(msobject$detailsAnnotation[[parent$Class]]$chainfragments[[i]]) > 0){
ch <- do.call(rbind, msobject$detailsAnnotation[[parent$Class]]$chainfragments[[i]])
if (length(ch) > 0){
chains <- rbind(chains, ch)
ch <- c()
}
}
}
if (length(chains) > 0){
peaksMS2 <- c(peaksMS2, chains$peakID)
namesMS2 <- c(namesMS2, paste(as.character(round(chains$m.z, 3)), chains$db, chains$cb, chains$adduct, sep="_"))
namesMS2 <- namesMS2[peaksMS2 != ""]
peaksMS2 <- peaksMS2[peaksMS2 != ""]
namesMS2 <- unique(namesMS2)
peaksMS2 <- unique(peaksMS2)
}
} else if (msobject$metaData$generalMetadata$acquisitionmode == "DDA"){
for (i in c){
ch <- c()
if (length(msobject$detailsAnnotation[[parent$Class]]$chainfragments[[i]]) > 0){
ch <- do.call(rbind, msobject$detailsAnnotation[[parent$Class]]$chainfragments[[i]])
if (length(ch) > 0){
chains <- rbind(chains, ch)
ch <- c()
}
}
}
if (length(chains) > 0){
chains <- unique(chains)
chains <- chains[chains$m.z != 0,]
peaksMS2 <- c(peaksMS2, chains$m.z)
scansMS2 <- c(scansMS2, chains$peakID)
namesMS2 <- c(namesMS2, paste(as.character(round(chains$m.z, 3)), chains$db, chains$cb, chains$adduct, sep="_"))
}
}
}
# id data is DDA, extract spectrum data
if (msobject$metaData$generalMetadata$acquisitionmode == "DDA"){
rawMS <- c()
for (i in c){
f <- c()
if (length(msobject$detailsAnnotation[[parent$Class]]$coelfrags[[i]]) > 0){
f <- msobject$detailsAnnotation[[parent$Class]]$coelfrags[[i]]
if (length(f) > 0){
rawMS <- rbind(rawMS, f)
f <- c()
}
}
}
}
############################################################################
# Plot
colorsMS1 <- c("#42858C", "#FE9300", "#870E75", "#3E71A8", "#FE6900")
colorsMS2 <- c("#7F8E39", "#5F3659", "#E5C616", "#16A08CFF", "#628395",
"#C5D86D", "#969696FF", "#358359FF", "#9F4D23FF", "#D86C4FFF",
"#170C2EFF", "#473B75FF", "#F19C1FFF")
if (msobject$metaData$generalMetadata$acquisitionmode == "DDA"){
nplots <- 1 + length(unique(rawMS$peakID))
} else {
nplots <- 2
}
grDevices::pdf(NULL) # use a pdf NULL device to save plots to an object
dev.off()
graphics::par(mfrow=c(nplots, 2), mar = c(3,4,4,1), mgp=c(2,1,0), bg = "white")
# plot MS1 info
if (length(peaksMS1) > 0){
ssms1 <- msobject$MS1[msobject$MS1$peakID %in% peaksMS1,]
minrt1 <- min(ssms1$RT)
maxrt1 <- max(ssms1$RT)
ints <- c()
for (p in 1:length(peaksMS1)){
toplot <- msobject$MS1[msobject$MS1$peakID == peaksMS1[p],]
toplot <- toplot[order(toplot$RT, decreasing = FALSE),]
ints <- append(ints, max(toplot$int))
toplot$int <- toplot$int*100/max(toplot$int)
if (p == 1){
plot(toplot$RT, toplot$int, type = "l", col = scales::alpha(colorsMS1[p], 0.8),
xlim = c(minrt1-5, maxrt1+5), ylim = c(0, 110),
lwd = 2.5, ylab = "Rel. Intensity", xlab = "RT (sec)",
main = paste("MS1: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"), sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1)
} else {
graphics::lines(toplot$RT, toplot$int, col = scales::alpha(colorsMS1[p], 0.8), lwd = 2.5)
}
}
graphics::legend("topright", legend=namesMS1,
col=colorsMS1[1:length(peaksMS1)], lty=1, lwd = 2, cex=0.6)
graphics::legend("bottomright", title = "Max. intensity",
legend=formatC(ints, format = "e", digits = 2),
col=colorsMS1[1:length(peaksMS1)], lty=1, lwd = 2, cex=0.6)
# smoothed
for (p in 1:length(peaksMS1)){
toplot <- msobject$MS1[msobject$MS1$peakID == peaksMS1[p],]
toplot <- toplot[order(toplot$RT, decreasing = FALSE),]
pred <- tryCatch({stats::predict(stats::smooth.spline(toplot$RT, toplot$int, spar = spar),
x = toplot$RT)},
error = function(e) {return(list(x = toplot$RT,
y = toplot$int))})
toplot$RT <- pred$x
toplot$int <- pred$y
toplot$int <- toplot$int*100/max(toplot$int)
if (p == 1){
plot(toplot$RT, toplot$int, type = "l", col = scales::alpha(colorsMS1[p], 0.8),
xlim = c(minrt1-5, maxrt1+5), ylim = c(0, 110),
lwd = 2.5, ylab = "Rel. Intensity", xlab = "RT (sec)",
main = paste("MS1: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"), sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 5)
} else {
graphics::lines(toplot$RT, toplot$int, col = scales::alpha(colorsMS1[p], 0.8), lwd = 2.5,
lty = 5)
}
}
graphics::legend("topright", legend=namesMS1,
col=colorsMS1[1:length(peaksMS1)], lty = 5, lwd = 2, cex=0.6)
graphics::legend("bottomright", title = "Max. intensity",
legend=formatC(ints, format = "e", digits = 2),
col=colorsMS1[1:length(peaksMS1)], lty = 5, lwd = 2, cex=0.6)
}
# plot MS2 info
if (length(peaksMS2) > 0){
# if data is DIA
if (msobject$metaData$generalMetadata$acquisitionmode == "DIA"){
ssms2 <- msobject$MS2[msobject$MS2$peakID %in% peaksMS2,]
minrt2 <- min(ssms2$RT)
maxrt2 <- max(ssms2$RT)
maxint2 <- max(ssms2$int)
ints2 <- c()
for (p in 1:length(peaksMS2)){
toplot <- msobject$MS2[msobject$MS2$peakID == peaksMS2[p],]
toplot <- toplot[order(toplot$RT, decreasing = FALSE),]
ints2 <- append(ints2, max(toplot$int))
toplot$int <- toplot$int/max(toplot$int)
toplot$int <- toplot$int*100/max(toplot$int)
if (p == 1){
plot(toplot$RT, toplot$int, type = "l", col = scales::alpha(colorsMS2[p], 0.8),
xlim = c(minrt1-5, maxrt1+5), ylim = c(0, 110),
lwd = 2.5, ylab = "Rel. Intensity", xlab = "RT (sec)",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"), sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1)
} else {
graphics::lines(toplot$RT, toplot$int, col = scales::alpha(colorsMS2[p], 0.8), lwd = 2.5)
}
}
graphics::legend("topright", legend=namesMS2,
col=colorsMS2[1:length(peaksMS2)], lty=1, lwd = 2, cex=0.6)
graphics::legend("bottomright", title = "Max. intensity",
legend=formatC(ints2, format = "e", digits = 2),
col=colorsMS2[1:length(peaksMS2)], lty=1, lwd = 2, cex=0.6)
# smoothed
for (p in 1:length(peaksMS2)){
toplot <- msobject$MS2[msobject$MS2$peakID == peaksMS2[p],]
toplot <- toplot[order(toplot$RT, decreasing = FALSE),]
toplot$int <- toplot$int/max(toplot$int)
pred <- tryCatch({stats::predict(stats::smooth.spline(toplot$RT, toplot$int, spar = spar),
x = toplot$RT)},
error = function(e) {return(list(x = toplot$RT,
y = toplot$int))})
toplot$RT <- pred$x
toplot$int <- pred$y
toplot$int <- toplot$int*100/max(toplot$int)
if (p == 1){
plot(toplot$RT, toplot$int, type = "l", col = scales::alpha(colorsMS2[p], 0.8),
xlim = c(minrt1-5, maxrt1+5), ylim = c(0, 110),
lwd = 2.5, ylab = "Rel. Intensity", xlab = "RT (sec)",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"), sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 5)
} else {
graphics::lines(toplot$RT, toplot$int, col = scales::alpha(colorsMS2[p], 0.8), lwd = 2.5,
lty = 5)
}
}
graphics::legend("topright", legend=namesMS2,
col=colorsMS2[1:length(peaksMS2)], lty = 5, lwd = 2, cex=0.6)
graphics::legend("bottomright", title = "Max. intensity",
legend=formatC(ints2, format = "e", digits = 2),
col=colorsMS2[1:length(peaksMS2)], lty = 5, lwd = 2, cex=0.6)
# if data is DDA
} else if (msobject$metaData$generalMetadata$acquisitionmode == "DDA"){
# for each scan
for (s in unique(rawMS$peakID)){
# subset raw data
ssrawMS <- rawMS[rawMS$peakID == s,]
ssmaxrawMS <- max(ssrawMS$int)
ssrawMS$int <- ssrawMS$int*100/max(ssrawMS$int)
ssrawMS$int[ssrawMS$int < 2] <- ssrawMS$int[ssrawMS$int < 2] + 2
mz2 <- peaksMS2[scansMS2 == s]
namesmz2 <- namesMS2[scansMS2 == s]
namesmz2 <- namesmz2[order(mz2, decreasing = FALSE)]
mz2 <- mz2[order(mz2, decreasing = FALSE)]
# assign colors
ssrawMS$color <- "black"
ssrawMS$color[ssrawMS$m.z %in% mz2] <- colorsMS2[1:sum(ssrawMS$m.z %in% mz2)]
# Find precursor in the MS/MS spectrum
scanprec <- unlist(strsplit(s, "_"))
collisionenergy <- as.numeric(scanprec[2])
scanprec <- as.numeric(scanprec[3])
precursor <- msobject$metaData$scansMetadata$precursor[
which(msobject$metaData$scansMetadata$msLevel == 2 &
msobject$metaData$scansMetadata$collisionEnergy == collisionenergy)[scanprec]]
prec <- as.numeric(unlist(sapply(precursor, mzMatch, ssrawMS$m.z, ppm = 10)))
if (length(prec) > 0){
prec <- prec[seq(1, length(prec), 2)]
mzprec <- ssrawMS$m.z[mz1p]
nameprec <- paste(round(mzprec, 3), "_precursor", sep="")
if (ssrawMS$color[prec] == "black"){
ssrawMS$color[prec] <- colorsMS2[length(namesmz2)+1]
namesmz2 <- c(namesmz2, nameprec)
}
}
colors2 <- ssrawMS$color[ssrawMS$color != "black"]
#plot
plot(ssrawMS$m.z, ssrawMS$int, type = "h", col = scales::alpha(ssrawMS$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 122, 20), labels = seq(0, 120, 20))
graphics::legend("topright", legend=namesmz2,
col=colors2, lty = 1, lwd = 2, cex=0.6)
# clean
ssrawMSclean <- ssrawMS[ssrawMS$color != "black",]
plot(ssrawMSclean$m.z, ssrawMSclean$int, type = "h",
col = scales::alpha(ssrawMSclean$color, 1),
xlim = c(0, max(ssrawMS$m.z)+20), ylim = c(0, 132),
lwd = 1.5, ylab = "Rel. Intensity", xlab = "m/z",
main = paste("MS2: ", paste(parent$ID, as.character(round(parent$m.z, 2)),
as.character(round(parent$RT, 1)), sep="_"),
paste("\nPrecursor: ", round(precursor, 3), sep = ""),
sep = ""),
las = 1, cex.axis = 0.7, cex.lab = 1, cex.main = 1, lty = 1, yaxt = "n" )
graphics::axis(2,at=seq(2, 102, 20), labels = seq(0, 100, 20))
graphics::legend("topright", legend=namesmz2,
col=colorsMS2[1:length(namesmz2)], lty = 1, lwd = 2, cex=0.6)
}
}
}
msobject$plots[[r]] <- grDevices::recordPlot() # save plot
precursor
setwd("H:/Maribel/metabolomica/20210201_datasetLipidMS/Positivo")
library(LipidMS)
setwd("H:/Maribel/metabolomica/20210201_datasetLipidMS/Positivo/")
################################################################################
# Input
files <- dir()[grepl("mzXML", dir())]
acquisitionmode <- rep("DIA", length(files))
acquisitionmode[grep("DDA", files)] <- "DDA"
polarity <- "positive"
dmzagglom <- 5
drtagglom <- 25
drtclust <- 25
minpeak <- c(10, 3)
drtgap <- 5
drtminpeak <- 20
drtmaxpeak <- 200
recurs <- 5
sb <- 2
sn <- 2
minint <- c(1000, 100)
weight <- c(2, 3)
dmzIso <- 5
drtIso <- 5
# parametros anotacion
dmzprecursor <- 5
dmzproducts <- 10
rttol <- 6
coelcutoff <- 0.7
load("msobjects.rda")
################################################################################
# anotacion
annotated_msobjects <- list() # tambien podriamos sobreescribirlo sobre la misma lista que antes (msobjects)
# Si polarity es positive
if (polarity == "positive"){
for (m in 1:length(msobjects)){
annotated_msobjects[[m]] <- idPOS(msobjects[[m]],
ppm_precursor = dmzprecursor,
ppm_products = dmzproducts,
rttol = rttol,
coelCutoff = coelcutoff,
lipidClasses = c("MG", "LPC", "LPE", "PC", "PE", "Sph",
"SphP", "Cer", "SM", "Car", "CE", "DG", "TG"))
}
}
# Si polarity es negative
if (polarity == "negative"){
for (m in 1:length(msobjects)){
annotated_msobjects[[m]] <- idNEG(msobjects[[m]],
ppm_precursor = dmzprecursor,
ppm_products = dmzproducts,
rttol = rttol,
coelCutoff = coelcutoff,
lipidClasses = c("FA", "FAHFA", "LPC", "LPE", "LPG", "LPI",
"LPS", "PC", "PE", "PG", "PI", "PS", "Sph",
"SphP", "Cer", "CL", "BA"))
}
}
save(annotated_msobjects, file = "annotated_msobjects.rda")
# tables in csv files
for (f in 1:length(annotated_msobjects)){
fname <- gsub(".mzXML", "", annotated_msobjects[[f]]$metaData$generalMetadata$file)
write.csv(annotated_msobjects[[f]]$results, file = paste0(fname, "_summaryResults.csv"),
row.names = FALSE)
write.csv(annotated_msobjects[[f]]$annotatedPeaklist,
file = paste0(fname, "_annotatedPeaklist.csv"),
row.names = FALSE)
}
# plots
for (f in 11:length(annotated_msobjects)){
annotated_msobjects[[f]] <- plotLipids(annotated_msobjects[[f]])
fname <- gsub(".mzXML", "", annotated_msobjects[[f]]$metaData$generalMetadata$file)
pdf(paste0(fname, ".pdf"))
for (p in 1:length(annotated_msobjects[[f]]$plots)){
print(annotated_msobjects[[f]]$plots[[p]])
}
dev.off()
}
save(annotated_msobjects, file = "annotated_msobjects.rda")
# Si polarity es positive
if (polarity == "positive"){
for (m in 1:length(msobjects)){
annotated_msobjects[[m]] <- idPOS(msobjects[[m]],
ppm_precursor = dmzprecursor,
ppm_products = dmzproducts,
rttol = rttol,
coelCutoff = coelcutoff,
lipidClasses = c("MG", "LPC", "LPE", "PC", "PE", "Sph",
"SphP", "Cer", "SM", "Carnitines", "CE", "DG", "TG"))
}
}
# Si polarity es negative
if (polarity == "negative"){
for (m in 1:length(msobjects)){
annotated_msobjects[[m]] <- idNEG(msobjects[[m]],
ppm_precursor = dmzprecursor,
ppm_products = dmzproducts,
rttol = rttol,
coelCutoff = coelcutoff,
lipidClasses = c("FA", "FAHFA", "LPC", "LPE", "LPG", "LPI",
"LPS", "PC", "PE", "PG", "PI", "PS", "Sph",
"SphP", "Cer", "CL", "BA"))
}
}
